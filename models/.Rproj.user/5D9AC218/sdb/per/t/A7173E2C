{
    "collab_server" : "",
    "contents" : "//Run simulation from 2018 to 2038, 15 care stages\n\n// tell R you need Boost and Cpp11\n// [[Rcpp::depends(BH)]]\n// [[Rcpp::plugins(cpp11)]]\n\n// include Rcpp, it takes care of most other headers you need\n#include <Rcpp.h>\n\n// include Boost's odeint and functional\n#include <boost/array.hpp>\n#include <boost/numeric/odeint.hpp>\n#include <boost/numeric/odeint/integrate/integrate_adaptive.hpp>\n#include <functional>\n\nusing namespace Rcpp;\nusing namespace std;\nusing namespace boost::numeric::odeint;\n\n//int const t_end=253+50*12;\n//double const t_end_double=252.0+50*12;\nint const t_end=21*12+1;\ndouble const t_end_double=252.0;\ntypedef boost::array< double ,250> state_type;\n\n// Function from state_type to NumericVector\nvoid boost_array_to_nvec2(state_type const& s,Rcpp::NumericVector & tmp) {\n  for (size_t i = 0; i < s.size(); ++i) {\n    tmp[i] = s[i];\n  }\n}\n\n// Function from NumericVector to state_type\nvoid nvec_to_boost_array2(Rcpp::NumericVector const& s, state_type & tmp) {\n  for (size_t i = 0; i < 250; ++i) {\n    tmp[i] = s[i];\n  }\n}\n\n// Function from state_type to NumericVector\nRcpp::NumericVector boost_array_to_nvec(state_type const& s) {\n  Rcpp::NumericVector tmp(s.size());\n  for (size_t i = 0; i < s.size(); ++i) {\n    tmp[i] = s[i];\n  }\n  return tmp;\n}\n\n// Function from NumericVector to state_type\nstate_type nvec_to_boost_array(Rcpp::NumericVector const& s) {\n  state_type tmp;\n  for (size_t i = 0; i < 250; ++i) {\n    tmp[i] = s[i];\n  }\n  return tmp;\n}\n// --------------------------------------------------------------------------------------------------------------\n// Transform R function to C++ function\n// [[Rcpp::export]]\nvoid my_fun22(Rcpp::NumericVector &x, const double t,const Rcpp::NumericVector theta,const Rcpp::NumericVector treat_dtg,const Rcpp::List parms, const Rcpp::NumericVector p2){\n  Function f(\"mod_dtg\");\n  // Function f(\"mod_1\");\n  x=f(_[\"t\"]=t+168.0,_[\"x\"]=x,_[\"p1\"]=theta,_[\"treat_dtg\"]=treat_dtg,_[\"parms\"]=parms,_[\"p2\"]=p2);\n}\n\n// Check if my_fun22 works\n// [[Rcpp::export]]\nRcpp::NumericVector my_function(Rcpp::NumericVector &x, const double t,const Rcpp::NumericVector theta, const Rcpp::NumericVector treat_dtg,const Rcpp::List parms, const Rcpp::NumericVector p2){\n  my_fun22(x,t,theta,treat_dtg,parms,p2);\n  return(x);\n}\n\n// Stepper function\ntypedef runge_kutta_dopri5< state_type > stepper_type;\n\n// Function to write the results\nRcpp::NumericMatrix data(t_end, 250);\nvoid write_cout_2( const state_type &x , const double t ) {\n  int t_ind = t;\n  Rcpp::NumericVector x2(250);\n  boost_array_to_nvec2(x,x2);\n  data(t_ind,_)= x2;\n}\n\n// Function that depends on theta, return a function that depends on x dxdt and t\nRcpp::NumericVector nvec(250);\nstd::function<void(const state_type&, state_type&, const double)> eq(const Rcpp::NumericVector theta, const Rcpp::NumericVector treat_dtg,const Rcpp::List parms, const Rcpp::NumericVector p2) {\n  return [&theta, &treat_dtg,&parms,&p2](const state_type &x, state_type &dxdt, const double t) {\n    boost_array_to_nvec2(x, nvec);\n    my_fun22(nvec,t,theta, treat_dtg,parms,p2);\n    nvec_to_boost_array2(nvec, dxdt);\n  };\n}\n\n// Function that solves the diff equations and return a NumericMatrix of size 130(128+2)x133(timesteps)\n// [[Rcpp::export]]\nRcpp::NumericMatrix my_fun10_solver2_dtg_2(const Rcpp::NumericVector vs, const Rcpp::NumericVector theta,const Rcpp::NumericVector treat_dtg,const Rcpp::List parms, const Rcpp::NumericVector p2) {\n  state_type x = nvec_to_boost_array(vs); // initial conditions\n  //integrate_adaptive(make_controlled( 1E-4 , 1E-4 , stepper_type () ) ,\n  //eqsir2 , x , 0.0 , 120.0 , 12.0 , write_cout_2 );\n  integrate_const(make_dense_output( 1E-6 , 1E-6 , stepper_type () ) ,\n                  eq(theta,treat_dtg,parms,p2) , x , 0.0 , t_end_double , 1.0 , write_cout_2);\n  return data;\n}",
    "created" : 1560248490596.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "603711593",
    "id" : "A7173E2C",
    "lastKnownWriteTime" : 1560341732,
    "last_content_update" : 1560341732034,
    "path" : "~/Step2/dtg/solvdiff_cpp_dtg_2_2019.cpp",
    "project_path" : "solvdiff_cpp_dtg_2_2019.cpp",
    "properties" : {
    },
    "relative_order" : 22,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "cpp"
}