{
    "collab_server" : "",
    "contents" : "library(deSolve)\nlibrary(mgcv)\n\n###################################################################################################\n#1. Number of adult people by gender from Jan 2005 to Jan 2018\nN_value=(c(seq(39845943.06,40029729.5,length.out=13),\n           seq(40029729.5,40544491.9,length.out=13),\n           seq(40544491.9,41221762.41,length.out=13),\n           seq(41221762.41,42376196.21,length.out=13),\n           seq(42376196.21,43678397.16,length.out=13),\n           seq(43678397.16,44530813.78,length.out=13),\n           seq(44530813.78,44878159.38,length.out=13),\n           seq(44878159.38,46527810.82,length.out=13),\n           seq(46527810.82,47609855.86,length.out=13),\n           seq(47609855.86,48395856.04,length.out=13),\n           seq(48395856.04,49250847.33,length.out=13),\n           seq(49250847.33,50105838.63,length.out=13),\n           seq(50105838.63,50960829.93,length.out=13))[-seq(13,145,12)])/1000\n\n#Approximate N by polynomial regression\n# q=1:14\n# model_N=lm(N_value[seq(1,length(N_value),12)]~1+q)\n# N_value=matrix(rep(predict(model_N,data.frame(q=seq(1,14,1/12))),2)*rep(c(0.5,0.5),each=157),ncol=2)\n# N_value_f=function(x){\n#   c=model_N$coefficients\n#   return(rep(as.numeric(c[1]+c[2]*x/12),2)*c(0.5,0.5))\n# }\n\nN_value=c(39845943.06,40029729.5,40544491.9,41221762.41,42376196.21,43678397.16,\n          44530813.78,44878159.38,46527810.82,47609855.86,48395856.04,49250847.33,\n          50105838.63,50960829.93)/1000\n\nN_v<-smooth.spline(1:14,N_value,df=5,all.knots=FALSE)\n# plot(1:14,N_value)\n# lines(N_v)\nN_value_f=function(x){\n  return(predict(N_v,x/12)$y*c(0.5,0.5))\n}\n###################################################################################################\n#Approximate N by piecewise linear regression\n# N_value=matrix(c(N_value*0.5,N_value*0.5),ncol=2)\n#Source: infected_number_south_africa.xls, WHO data\n\n# #UNAIDS data 2016\n# infect_value=matrix(c(c(2000,2000,2100,2200,2200,2300,2300,2400,2400,2500,2600),c(2800,3000,3100,3200,3300,3400,3500,3700,3800,3900,4000)),ncol=2)\n# #UNAIDS data 2017\n# infect_value=matrix(c(c(4381829,4582925,4794095,5011212,5234965,5461845,5685587,5902030,6112272,6318242,6522204)/1000*infect_value[,1]/apply(infect_value,1,sum),\n#                       c(4381829,4582925,4794095,5011212,5234965,5461845,5685587,5902030,6112272,6318242,6522204)/1000*infect_value[,2]/apply(infect_value,1,sum)),ncol=2)\n###################################################################################################\n#2. Indicators\n#2.1 new-infections\n#UNAIDS data\n#newinf_value=c(430,420,400,380,350,330,310,300,290,280)\n#Thembisa model 3.2\nnewinf_value=c(441497,427698,414740,400560,379684,350942,326664,308435,293567,283373,271790)/1000\n#Thembisa 4.1\nnewinf_value=c(439029,428332,418730,409352,395063,367873,338104,318663,308944,300207,287713)/1000\n#newinf_value=newinf_value[1:10]\n\n#2.2 undiagnosed people\n#Thembisa model 3.2\n# perdia_value=c(0.7285,0.6761,0.6154,0.5531,0.4904,0.389,0.2977,0.2422,0.2019,0.1794,0.1566)\n# undiag_value=infect_value*perdia_value\n# diag_value=infect_value-undiag_value\n#Thembisa model 4.1\nundiag_value=c(3094590,2967863,2790007,2590452,2386932,2052798,1616430,1290562,1076152,978526,877507)/1000\n  \n#2.3 AIDS-deaths\n#UNAIDS data\n#death_value=c(230,240,240,220,200,190,170,140,120,100)\n#Thembisa model 3.2\ndeath_value=c(244859,238976,218661,197021,172779,147706,122148,109293,98513, 91823,93398)/1000\n#Thembisa model 4.1\ndeath_value=c(232679,219608,198331,182479,165290,143782,120637,106163,97195,90625,83308)/1000\n#death_value=death_value[1:10]\n\n#2.4 ART-coverage\n#UNAIDS data 2017: percentage of infected ind that are treated from 2010 to 2015\ntreat_percent=(c(20,27,34,40,45,49,56)/100)[1:6]\n#Thembisa 4.1 from 2005 to 2015\ntreat_percent=c(2.1,3.7,6.3,9.5,13.7,19.7,27.8,34.7,39.8,43.5,49.1)/100\n#treat_percent=treat_percent[1:10]\ntreat_value=c(88855,167360,299090,475040,716858,1075496,1582796,2058259,2446315,2770487,3236740)/1000\n####################################################################################################################################\n#Number of infected people reaching 15 years old at the beginning of the year, from 2005 to 2018\ninf_m15_m=c(292,407,556,726,908,1145,1274,1293,1209,1137,1039,946,893,838)/1000\ndiag_m15_m=c(233,428,758,1260,1925,2669,3224,4023,4452,4852,5226,5303,5220,5077)/1000\ntreat_m15_m=c(10,31,96,236,486,869,1690,2559,3313,4084,5031,5927,7042,7884)/1000\ninf_m15_w=c(2414,2463,2537,2660,2796,2841,2788,2771,2637,2601,2480,2287,2181,2120)/1000\ndiag_m15_w=c(322,539,893,1440,2181,3136,3795,4562,4934,5243,5627,5759,5553,5322)/1000\ntreat_m15_w=c(10,33,102,249,511,911,1760,2629,3371,4124,5064,5950,7201,8080)/1000\n\ninf_m<-smooth.spline(1:14,inf_m15_m,df=5,all.knots=FALSE)\n# plot(1:14,inf_m15_m)\n# lines(inf_m)\n# predict(inf_m,1)$y\ninf_w<-smooth.spline(1:14,inf_m15_w,df=5,all.knots=FALSE)\ndiag_m<-smooth.spline(1:14,diag_m15_m,df=5,all.knots=FALSE)\ndiag_w<-smooth.spline(1:14,diag_m15_w,df=5,all.knots=FALSE)\ntreat_m<-smooth.spline(1:14,treat_m15_m,df=5,all.knots=FALSE)\ntreat_w<-smooth.spline(1:14,treat_m15_w,df=5,all.knots=FALSE)\n####################################################################################################################################\n#Number of infected people reaching 15 years old at the beginning of the year, from 2004 to 2017\n#See excel file to find exact calculations\ninfected_m15=c(498,806,1302,2086,3243,4835,6851,9199,11635,14142,16917,19517,22073,24402,26563,29293,30782,31198,30022,26213,21217,17414,15291,14669,13625,12026,11023,10221,9508,8720,7885,7080,6375,5819,5418)/1000\n#infected_m15=c(403,654,1055,1684,2604,3860,5428,7238,8864,10336,11736,12667,13258,13334,12888)/1000\n\n#Average with the previous year to have something that gradually increases\ninfected_m15=(infected_m15[-length(infected_m15)]+infected_m15[-1])/2\n# infected_m15_month=rep(NA,(length(infected_m15)-1)*12+1)\n# for(i in 1:(length(infected_m15)-1)){\n#   infected_m15_month[(12*(i-1)+1):(12*i+1)]=seq(infected_m15[i],infected_m15[i+1],length.out=13)/12\n# }\n#infected_m15_months is the number of infected that reach 15 each month, first month is Jan 2005, last month is Jan 2018\ntreat_m15=1-c(0.9422,0.8948,0.8339,0.7534,0.6631,0.5595,0.4759,0.4079,0.3560,0.3150,0.2858,0.2622,0.2353,0.2081,0.1829,0.1597,0.1402,0.1260,0.1171,0.1121,0.1124,0.1119,0.1106,0.1074,0.1028,0.0962,0.0890,0.0840,0.0808,0.0791,0.0787,0.0796,0.0802,0.0806)\n#treat_m15=c(1, 2.6, 4.9, 8.8, 13.7, 20.1, 27.3, 35.5, 42.0, 47.2, 50.8, 53.4, 55.1, 56.0, 57.4)/100 #percentage from 2004 to 2018\n#treat_m15=unique(as.vector(sapply(1:(length(treat_m15)-1),function(x) seq(treat_m15[x],treat_m15[x+1],length.out=13))))\n#treat_m15=treat_m15[7:(length(treat_m15)-6)] #monthly from jan 2005 to jan 2018\nres_m15=50/100 #Percentage of resistant people when getting 15 years old\n\n#Approximation by polynomial regression\nq=0:33\n#model_treat=lm(treat_m15[seq(1,157,12)]~poly(q))\n#treat_m15_app<-predict(model_treat,data.frame(q=seq(0,33,1/12)))\nmodel_infected=lm(infected_m15~-1+q+I(q^2)+I(q^3))\ninfected_m15_f=function(x){\n  c=model_infected$coefficients\n  return((c[1]*x/12+c[2]*(x/12)^2+c[3]*(x/12)^3)/12)\n}\nmodel_treat=lm(treat_m15~1+q+I(q^2)+I(q^3))\ntreat_m15_f=function(x){\n  c=model_treat$coefficients\n  return(c[1]+c[2]*x/12+c[3]*(x/12)^2+c[4]*(x/12)^3)\n}\n\n#not used\np1_f=function(t,q,Treat_frame){\n#min(1,q*weighted.mean(sapply(2005+seq(t-36,t,1)/12,function(x) apply(Treat_frame[4,],1,function(y) smooth_st(x,y[\"a\"],y[\"b\"],y[\"c\"],y[\"d\"]))*1/(1/smooth_st(x,2001,2012,1/200,1/12)+smooth_st(x,2012,2015,0,0) )),w=c(1-(t-floor(t)),rep(1,35),t-floor(t))))\n  min(1,q*mean(sapply(2005+seq(t-36,t,1)/12,function(x) apply(Treat_frame[4,],1,function(y) smooth_st(x,y[\"a\"],y[\"b\"],y[\"c\"],y[\"d\"]))*1/(1/smooth_st(x,2001,2012,1/200,1/12)+smooth_st(x,2012,2015,0,0)))))\n}\n\n##############################################################################################################################################\n#Starting point\nundiag_start=c(1308090,1875356)/1000\ndiag_start=c(355630,795094)/1000\ntreat_start=c(32928,55927)/1000\n##############################################################################################################################################\n#Starting point\nstart_value=array(0,dim=c(8,4,2,2))\n#WHO: http://www.who.int/gho/hiv/epidemic_response/ART_text/en/\nN_start=N_value_f(1)\nS_start=N_start-apply(start_value,4,sum)\n#xstart=c(start_value,0,0,0,0,0)\n#times=0:(12*13) #first month Jan 2005, last month Jan 2018\n##############################################################################################################################\n#Functions\n\n#Smoothstep function, parameters x=actual time,a=time it started to change,b=time when it finished to change,c=value after change\n#It is used for treatment rate, which depends on time\nsmooth_st=function(x,a,b,c,d){\n  if(a==b){\n    if(x<a){\n      return(c)\n    }else{\n      return(d)\n    }\n  }else{\n  if(x<a){\n    return(c)\n  }else if(x>b){\n    return(d)\n  }else{\n    return(c+(d-c)*(3*((x-a)/(b-a))^2-2*((x-a)/(b-a))^3))\n  }\n  }\n}\n\nlin_st=function(x,a,b,c,d){\n  if(a==b){\n    if(x<a){\n      return(c)\n    }else{\n      return(d)\n    }\n  }else{\n    if(x<a){\n      return(c)\n    }else if(x>b){\n      return(d)\n    }else{\n      return(c+(d-c)*(x-a)/(b-a))\n    }\n  }\n}\n\n#Repartition function\nrepart_f=function(k){\n  x1=1/(1+k+k^2+k^3)\n  x2=k*x1\n  x3=k*x2\n  x4=k*x3\n  return(c(x1,x2,x3,x4))\n}\n\n##############################################################################################################################\n##############################################################################################################################################mu=array(0,dim=c(8,5,2))\n#Parameters values\n#Mortality\n\nmu=array(NA,dim=c(8,4,2))\n#mu[1,1:4,1]=c(1.57,2,4.57,89.71)\nmu[1,1:4,1]=c(1.57,2,4.57,NA)\nmu[2,1:4,1]=mu[1,1:4,1]\n#mu[4,1:4,1]=c(1,1.26,1.94,23.6)\nmu[4,1:4,1]=c(1,1.26,1.94,NA)\n#mu[5,1:4,1]=c(3.92,3.92,4.28,33.8)\nmu[5,1:4,1]=c(3.92,3.92,4.28,NA)\nmu[6:8,1:4,1]=mu[3:5,1:4,1]\nmu[1:8,1:4,2]=mu[1:8,1:4,1]\n\nparams<-list(\n  mu=mu,\n  diag_women=1.25,#increased baseline diagnosis rate for men compared to women,\n  oi_inc=c(0.05,0.12,0.27,0.9)/12, #(incidence of opportunistic infection according to cd4 class)/12\n  oi_test=c(a=2005,b=2015,c=0.2,d=0.8), #rate per year of HIV-testing after OI, sigmoid function\n  preg_inc=23/1000*c(1,0.96,0.87,0.74)/12, #(incidence of pregnancy per year according to cd4 class)/12\n  preg_test=c(a=2005,b=2010,c=0.5,d=0.98), #rate per year of HIV-testing for pregnant women, sigmoid function\n  ##############################################################################################################################\n  #Infection rate\n  #Transmission rate 1: MM,male infected, 2:FM,male infected, 3:MF,female infected, 4:FF,female infected\n  RateTransm=c(0.008*0.05,0.003*0.95,0.003*0.95,0),\n  #RateTransm=c(0.0075*0.05,0.0008*0.95,0.0004*0.95,0),\n  ##############################################################################################################################\n  #Care stages\n  #(Percentage of eligible people according to cd4 class) times (rate ratios between cd4<200, reference and other cd4 classes)\n  Treat_frame=data.frame(a=c(2015.5,2013.5,2009.5,2001),b=c(2016.5,2015.5,2012.5,2004),c=c(0,0,0,0),d=c(0.4,0.5,0.7,1)), #Caution: if change this one, change Treat_frame_original\n  #Treat_frame=data.frame(a=c(2015.5,2013.5,2009.5,2001),b=c(2016.5,2015.5,2012.5,2004),c=c(0,0,0,0),d=c(1,1,1,1)), #Caution: if change this one, change Treat_frame_original\n  \n  Treat_frame2=data.frame(a=c(0,0,0,0),b=c(0,0,0,0),c=c(0,0,0,0),d=c(0,0,0,0)),#Treatframe when earlier universal test and treat (scen3)\n  Diag_frame=data.frame(a=c(2005,2005,2005,2005),b=c(2015,2015,2015,2015),c=c(1,1,1,1),d=c(1,1,1,1)),\n  #Diag_frame=data.frame(a=c(2005,2005,2005,2005),b=c(2015,2015,2015,2015),c=c(0.2,0.5,1,2),d=c(0.2,0.5,1,2)),\n  \n  \n  #Counterfactual scenario: need to define here as some parameters modified by the counterfactual scenario should not when before 2005\n  Treat_frame_original=data.frame(a=c(2015.5,2013.5,2009.5,2001),b=c(2016.5,2015.5,2012.5,2004),c=c(0,0,0,0),d=c(0.4,0.5,0.7,1)),#Treat_frame that is not modified by counterfactual scenario (scen1)\n  #Diag_frame=data.frame(a=c(2005,2005,2005,2005),b=c(2015,2015,2015,2015),c=c(1,1,1,1),d=c(1,1,1,1)*4),\n  # Constant diag rate doesn't work\n  ##############################################################################################################################\n  # Care stages 1\n  RateSuppFirst=4.35/c(24,39,41,60),\n  RateFailFirst=4.35/c(2700,2000,980,380),\n  RateFailFirstDTG=4.35/c(2700,2000,980,380),\n  RateTreatToFailFirstDTG=4.35/c(100,95,65,55),\n  #RateTreatSecond=4.35/c(3000,8000,2000,1200)*1,\n  RateTreatSecond=4.35/c(407,700,281,153),\n  RateSuppFirstDTG=4.35/c(24,39,41,60),\n  RateFailToSuppTreatFirstDTG=4.35/c(120,200,210,230),\n  \n  #crude estimates\n  #RateSuppSecond=4.35/c(17,21,58,120),\n  #RateFailSecond=4.35/c(640,450,440,270),\n  #corrected estimates\n  RateSuppSecond=4.35/c(21,34,19,18),\n  RateFailSecond=4.35/c(257,185,173,93),\n  #take same estimate as T1\n  #RateSuppSecond=4.35/c(24,39,41,60),\n  #RateFailSecond=4.35/c(2700,2000,980,380),\n  \n  #r_T1toS1=4.35/c(48,50,33,27),\n  r_T1toS1=4.35/c(24,39,41,60),\n  r_S1toF1=4.35/c(3305,2426,1086,383),\n  r_F1toT2=4.35/c(3035,5221,2092,1142),\n  #r_T2toS2=4.35/c(32,50,29,27),\n  r_T2toS2=4.35/c(17,21,58,120),\n  r_S2toF2=4.35/c(735,530,496,266),\n  ##############################################################################################################################\n  # Care stages 2\n  \n  RateStopTreatFirst=4.35/c(1800,1400,750,680),\n  RateStopSuppFirst=4.35/c(9000,5400,3300,1600),\n  RateStopFailFirst=4.35/c(2700,2080,1240,560),\n  RateStopTreatSecond=4.35/c(1800,1400,750,680), #Assumption : T2 same as T1\n  #RateStopSuppSecond=4.35/c(390,725,660,1600),\n  RateStopSuppSecond=4.35/c(9000,5400,3300,1600), #Assumption : S2 same as S1\n  RateStopFailSecond=4.35/c(2700,2080,1240,560), #Assumption : F2 same as F1\n  RateDirectTreatSecond=4.35/c(5000,12000,13000,1850),\n  \n  RateFailToSuppTreatFirst=4.35/c(120,200,210,230),\n  #RateFailToSuppTreatSecond=4.35/c(65,286,173,322), #crude estimate\n  RateSuppFirstToSecond=4.35/c(Inf,Inf,Inf,Inf),\n  RateTreatToFailFirst=4.35/c(100,95,65,55),\n  #RateTreatToFailSecond=4.35/c(35,25,27,20), #crude estimate\n\n  \n  #corrected estimates\n  RateFailToSuppTreatSecond=4.35/c(10,45,27,51),\n  RateTreatToFailSecond=4.35/c(85,105,52,34),\n  #as T1\n  #RateFailToSuppTreatSecond=4.35/c(120,200,210,230),\n  #RateTreatToFailSecond=4.35/c(100,95,65,55),\n  \n  r_T1toD=4.35/c(6968,4663,1728,1175)*1,\n  r_S1toD=4.35/c(11003,6459,3629,1599)*1,\n  r_F1toD=4.35/c(2654,3045,1843,840)*1,\n  r_T2toD=4.35/c(331,357,285,173),\n  r_S2toD=4.35/c(452,849,744,1597),\n  r_F2toD=4.35/c(300,300,300,300),\n  r_DtoT2=4.35/c(3593,Inf,Inf,3163),\n  r_F1toS1=4.35/c(115,256,266,309),\n  r_F2toS2=4.35/c(65,286,173,322),\n  r_S1toS2=4.35/c(Inf,Inf,Inf,Inf),\n  r_T1toF1=4.35/c(297,251,141,86),\n  r_T2toF2=4.35/c(83,102,50,33),\n  ##############################################################################################################################\n  # Disease progression\n  #RateStageInf=4.35/c(50,35,46)/1,\n  #RateStageDiag=4.35/c(50,35,46)/1,\n  RateStageInf=4.35/c(260,156,182), #from Mangal 2017\n  RateStageDiag=4.35/c(260,156,182), #RateStageInf\n  RateStageTreatFirstR=4.35/c(120,80,195)/1,\n  RateStageTreatFirstL=4.35/c(55,95,500),\n  RateStageSuppFirst=4.35/c(65,55,45),\n  RateStageFailFirst=4.35/c(75,48,70)/1,\n  RateStageTreatSecondR=4.35/c(120,80,195), #Assumption : T2 stages like T1 stages\n  RateStageTreatSecondL=4.35/c(55,95,500), #Assumption : T2 stages like T1 stages\n  RateStageSuppSecond=4.35/c(60,55,33),\n  RateStageFailSecond=4.35/c(65,60,50),\n  #RateStageSuppSecond=4.35/c(65,55,45), #if as T1 (just for checking)\n  #RateStageFailSecond=4.35/c(75,48,70)/1, #if as T1 (just for checking)\n  \n  #RateStageInfL=4.35/c(80,80,106),\n  #RateStageDiagL=4.35/c(80,80,106),\n  \n  #RateStageInfL=4.35/c(Inf,Inf,Inf),\n  #RateStageDiagL=4.35/c(Inf,Inf,Inf),\n  \n  r_I_cd4_R=4.35/c(55,54,80)/1,\n  #r_I_cd4_L=4.35/c(80,79,106),\n  r_I_cd4_L=4.35/c(Inf,Inf,Inf),\n  r_D_cd4_R=4.35/c(55,54,80)/1,\n  #r_D_cd4_L=4.35/c(80,79,106),\n  r_D_cd4_L=4.35/c(Inf,Inf,Inf),\n  r_T1_cd4_R=4.35/c(192,115,262)/1,\n  r_T1_cd4_L=4.35/c(76,110,304),\n  r_S1_cd4_L=4.35/c(75,62,43),\n  r_F1_cd4_R=4.35/c(78,65,96)/1,\n  r_T2_cd4_R=4.35/c(110,102,170),\n  r_T2_cd4_L=4.35/c(129,110,863),\n  r_S2_cd4_L=4.35/c(71,65,33),\n  r_F2_cd4_R=4.35/c(65,71,71)\n  )",
    "created" : 1551344348523.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2501888241",
    "id" : "7C09C6B6",
    "lastKnownWriteTime" : 1559752006,
    "last_content_update" : 1559752006,
    "path" : "~/Step1/Rfiles/used scripts/marisa/value_gender4_v3.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 8,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}